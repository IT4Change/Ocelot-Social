import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as a,o as i,c as r,a as e,b as o,d as t,e as d}from"./app-DAOD0aSW.js";const l={},c=e("h1",{id:"components-–-code-guidelines",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#components-–-code-guidelines"},[e("span",null,"Components – Code Guidelines")])],-1),p={id:"we-adhere-to-the-single-responsibility-principle",tabindex:"-1"},h={class:"header-anchor",href:"#we-adhere-to-the-single-responsibility-principle"},m={href:"https://en.wikipedia.org/wiki/Single_responsibility_principle",target:"_blank",rel:"noopener noreferrer"},u=d('<p>Each component does <em>exactly one job</em>. The goal is to end up with many small components that are:</p><ul><li>easy to understand</li><li>easy to maintain</li><li>easy to reuse</li></ul><p><strong>How do you decide what is a separate component?</strong> Try to describe what it does in <em>one sentence</em>! When you find yourself using <code>and</code> and <code>or</code> the code you are talking about should probably be split up into two or more components.</p><p>On the other hand, when something is easily expressed in a few lines of HTML and SCSS and not likely to be reused this is a good indicator that it should <em>not</em> go into a separate component.</p><h2 id="we-compose-with-components" tabindex="-1"><a class="header-anchor" href="#we-compose-with-components"><span>We compose with components</span></a></h2><p>Usually <code>pages</code> use <code>layouts</code> as templates and will be composed of <code>features</code>. <code>features</code> are composed of <code>components</code>, the smallest building blocks of the app. The further down we go in this hierarchy the simpler and more generic the components become. Here is an example:</p><ul><li>The <code>index</code> page is responsible for displaying a list of posts. It uses the <code>default</code> layout and the <code>PostList</code> feature.</li><li>The <code>PostList</code> feature uses a <code>List</code> component to render <code>PostTeaser</code> features.</li><li>The <code>PostTeaser</code> feature consists of a <code>LayoutCard</code> wrapped around a <code>CardImage</code>, <code>CardTitle</code> and <code>CardContent</code> component.</li></ul><p>The <code>index</code> page is unique in the app and will never be reused. The <code>PostList</code> knows it is handling post data and can therefore not be used for anything else – but it can display posts on the <code>index</code> as well as the <code>user</code> page.</p><p>The <code>Card</code> on the other hand does not care about the type of data it needs to handle. It just takes whatever it receives and renders it in a certain way, so it can be reused throughout the app for many different features.</p><h2 id="we-use-two-word-names" tabindex="-1"><a class="header-anchor" href="#we-use-two-word-names"><span>We use two-word names</span></a></h2>',10),g={href:"https://vuejs.org/v2/guide/components-registration.html#Component-Names",target:"_blank",rel:"noopener noreferrer"},w=e("p",null,[o("Names should also be meaningful and unique to avoid confusion and code duplication, and also not too long to make them readable. Therefore: aim for two-word names, such as "),e("code",null,"layout-card"),o(", "),e("code",null,"post-list"),o(" or "),e("code",null,"post-teaser"),o(".")],-1),f=e("h2",{id:"recommended-reads",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#recommended-reads"},[e("span",null,"Recommended reads")])],-1),b=e("p",null,"For a deeper dive into the WHY and HOW have a look at the following resources which the above guidelines are based on:",-1),_={href:"https://bradfrost.com/blog/post/atomic-web-design/",target:"_blank",rel:"noopener noreferrer"},y={href:"https://medium.com/@wereheavyweight/how-were-using-component-based-design-5f9e3176babb",target:"_blank",rel:"noopener noreferrer"},k={href:"https://pablohpsilva.github.io/vuejs-component-style-guide/#/",target:"_blank",rel:"noopener noreferrer"};function v(T,x){const n=a("ExternalLinkIcon");return i(),r("div",null,[c,e("h2",p,[e("a",h,[e("span",null,[o("We adhere to the "),e("a",m,[o("single responsibility principle"),t(n)])])])]),u,e("p",null,[o("We follow the W3C rules for naming custom elements as suggested in the "),e("a",g,[o("Vue.js docs"),t(n)]),o(" to differentiate our own components from regular HTML elements in our templates.")]),w,f,b,e("ul",null,[e("li",null,[e("a",_,[o("Atomic design"),t(n)])]),e("li",null,[e("a",y,[o("CDD – component based design"),t(n)])]),e("li",null,[e("a",k,[o("Vue.js component styleguide"),t(n)])])])])}const L=s(l,[["render",v],["__file","components.html.vue"]]),j=JSON.parse('{"path":"/webapp/components.html","title":"Components – Code Guidelines","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"We adhere to the single responsibility principle","slug":"we-adhere-to-the-single-responsibility-principle","link":"#we-adhere-to-the-single-responsibility-principle","children":[]},{"level":2,"title":"We compose with components","slug":"we-compose-with-components","link":"#we-compose-with-components","children":[]},{"level":2,"title":"We use two-word names","slug":"we-use-two-word-names","link":"#we-use-two-word-names","children":[]},{"level":2,"title":"Recommended reads","slug":"recommended-reads","link":"#recommended-reads","children":[]}],"git":{"createdTime":1729782505000,"updatedTime":1729782505000,"contributors":[{"name":"Wolfgang Huß","email":"wolle.huss@pjannto.com","commits":1}]},"readingTime":{"minutes":1.42,"words":427},"filePathRelative":"webapp/components.md","localizedDate":"October 24, 2024","excerpt":"\\n<h2><a class=\\"header-anchor\\" href=\\"#we-adhere-to-the-single-responsibility-principle\\"><span>We adhere to the </span></a><a href=\\"https://en.wikipedia.org/wiki/Single_responsibility_principle\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">single responsibility principle</a></h2>\\n<p>Each component does <em>exactly one job</em>. The goal is to end up with many small components that are:</p>"}');export{L as comp,j as data};
