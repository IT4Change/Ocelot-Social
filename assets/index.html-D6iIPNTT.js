import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as a,o as i,c as r,a as e,b as s,d as o,e as l}from"./app-DAOD0aSW.js";const c="/assets/grafik-1 (1)-D9Bz6W0K.png",d="/assets/grafik (1)-BTXGtrIV.png",p={},h=l(`<h1 id="end-to-end-testing" tabindex="-1"><a class="header-anchor" href="#end-to-end-testing"><span>End-to-End Testing</span></a></h1><h2 id="setup-with-docker" tabindex="-1"><a class="header-anchor" href="#setup-with-docker"><span>Setup with docker</span></a></h2><p>Are you running everything through docker? You&#39;re so lucky you don&#39;t have to setup anything!</p><p>Just:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">docker-compose</span> up
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="setup-without-docker" tabindex="-1"><a class="header-anchor" href="#setup-without-docker"><span>Setup without docker</span></a></h2><p>To start the services that are required for cypress testing manually. You basically need the whole setup to run:</p><ul><li>backend</li><li>webapp</li><li>neo4j</li></ul><p>Navigate to the corresponding folders and start the services.</p><h2 id="install-cypress" tabindex="-1"><a class="header-anchor" href="#install-cypress"><span>Install cypress</span></a></h2><p>Even if the required services for testing run via docker, depending on your setup, the cypress tests themselves run on your host machine. So with our without docker, you would have to install cypress and its dependencies first:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># in the root folder /</span>
$ <span class="token function">yarn</span> <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="open-interactive-test-console" tabindex="-1"><a class="header-anchor" href="#open-interactive-test-console"><span>Open Interactive Test Console</span></a></h3><p>The interactive cypress test console allows to run tests and have visual feedback on that. The interactive cypress environment also helps at debugging the tests, you can even time travel between individual steps and see the exact state of the app.</p><p>To use this feature run:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">yarn</span> cypress:open
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+c+`" alt="Interactive Cypress Environment" loading="lazy"></p><h2 id="run-cypress" tabindex="-1"><a class="header-anchor" href="#run-cypress"><span>Run cypress</span></a></h2><p>To run cypress without the user interface:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ <span class="token function">yarn</span> cypress:run
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>This is used to run cypress in CI or in console</p><p><img src="`+d+'" alt="Console output after running cypress test" loading="lazy"></p><h2 id="write-some-tests" tabindex="-1"><a class="header-anchor" href="#write-some-tests"><span>Write some Tests</span></a></h2>',23),u={href:"https://docs.cypress.io/guides/getting-started/writing-your-first-test.html#Write-a-simple-test",target:"_blank",rel:"noopener noreferrer"};function v(g,m){const t=a("ExternalLinkIcon");return i(),r("div",null,[h,e("p",null,[s("Check out the Cypress documentation for further information on how to write tests: "),e("a",u,[s("Write-a-simple-test"),o(t)])])])}const f=n(p,[["render",v],["__file","index.html.vue"]]),b=JSON.parse(`{"path":"/cypress/","title":"End-to-End Testing","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Setup with docker","slug":"setup-with-docker","link":"#setup-with-docker","children":[]},{"level":2,"title":"Setup without docker","slug":"setup-without-docker","link":"#setup-without-docker","children":[]},{"level":2,"title":"Install cypress","slug":"install-cypress","link":"#install-cypress","children":[{"level":3,"title":"Open Interactive Test Console","slug":"open-interactive-test-console","link":"#open-interactive-test-console","children":[]}]},{"level":2,"title":"Run cypress","slug":"run-cypress","link":"#run-cypress","children":[]},{"level":2,"title":"Write some Tests","slug":"write-some-tests","link":"#write-some-tests","children":[]}],"git":{"createdTime":1729782505000,"updatedTime":1729782505000,"contributors":[{"name":"Wolfgang Hu√ü","email":"wolle.huss@pjannto.com","commits":1}]},"readingTime":{"minutes":0.79,"words":237},"filePathRelative":"cypress/README.md","localizedDate":"October 24, 2024","excerpt":"\\n<h2>Setup with docker</h2>\\n<p>Are you running everything through docker? You're so lucky you don't have to\\nsetup anything!</p>\\n<p>Just:</p>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code>$ <span class=\\"token function\\">docker-compose</span> up\\n</code></pre></div>"}`);export{f as comp,b as data};
