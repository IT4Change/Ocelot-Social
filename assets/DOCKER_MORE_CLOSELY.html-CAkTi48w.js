import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,e as n}from"./app-DAOD0aSW.js";const o={},r=n(`<h1 id="docker" tabindex="-1"><a class="header-anchor" href="#docker"><span>Docker</span></a></h1><h2 id="apple-m1-platform" tabindex="-1"><a class="header-anchor" href="#apple-m1-platform"><span>Apple M1 Platform</span></a></h2><p><em><strong>Attention:</strong> For using Docker commands in Apple M1 environments!</em></p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># set env variable for your shell</span>
$ <span class="token builtin class-name">export</span> <span class="token assign-left variable">DOCKER_DEFAULT_PLATFORM</span><span class="token operator">=</span>linux/amd64
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="docker-compose-override-file-for-apple-m1-platform" tabindex="-1"><a class="header-anchor" href="#docker-compose-override-file-for-apple-m1-platform"><span>Docker Compose Override File For Apple M1 Platform</span></a></h3><p>For Docker compose <code>up</code> or <code>build</code> commands, you can use our Apple M1 override file that specifies the M1 platform:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># in main folder</span>

<span class="token comment"># for production</span>
$ <span class="token function">docker</span> compose <span class="token parameter variable">-f</span> docker-compose.yml <span class="token parameter variable">-f</span> docker-compose.apple-m1.override.yml up

<span class="token comment"># for production testing Docker images from DockerHub</span>
$ <span class="token function">docker</span> compose <span class="token parameter variable">-f</span> docker-compose.ocelotsocial-branded.yml <span class="token parameter variable">-f</span> docker-compose.apple-m1.override.yml up

<span class="token comment"># only once: init admin user and create indexes and constraints in Neo4j database</span>
$ <span class="token function">docker</span> compose <span class="token builtin class-name">exec</span> backend /bin/sh <span class="token parameter variable">-c</span> <span class="token string">&quot;yarn prod:migrate init&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),l=[r];function t(i,p){return a(),s("div",null,l)}const m=e(o,[["render",t],["__file","DOCKER_MORE_CLOSELY.html.vue"]]),v=JSON.parse('{"path":"/deployment/DOCKER_MORE_CLOSELY.html","title":"Docker","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Apple M1 Platform","slug":"apple-m1-platform","link":"#apple-m1-platform","children":[{"level":3,"title":"Docker Compose Override File For Apple M1 Platform","slug":"docker-compose-override-file-for-apple-m1-platform","link":"#docker-compose-override-file-for-apple-m1-platform","children":[]}]}],"git":{"createdTime":1729782505000,"updatedTime":1729782505000,"contributors":[{"name":"Wolfgang Hu√ü","email":"wolle.huss@pjannto.com","commits":1}]},"readingTime":{"minutes":0.36,"words":108},"filePathRelative":"deployment/DOCKER_MORE_CLOSELY.md","localizedDate":"October 24, 2024","excerpt":"\\n<h2>Apple M1 Platform</h2>\\n<p><em><strong>Attention:</strong> For using Docker commands in Apple M1 environments!</em></p>\\n<div class=\\"language-bash\\" data-ext=\\"sh\\" data-title=\\"sh\\"><pre class=\\"language-bash\\"><code><span class=\\"token comment\\"># set env variable for your shell</span>\\n$ <span class=\\"token builtin class-name\\">export</span> <span class=\\"token assign-left variable\\">DOCKER_DEFAULT_PLATFORM</span><span class=\\"token operator\\">=</span>linux/amd64\\n</code></pre></div>"}');export{m as comp,v as data};
