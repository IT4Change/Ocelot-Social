import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as c,c as d,a as e,b as n,d as a,w as o,e as t}from"./app-DAOD0aSW.js";const p={},u=e("h1",{id:"kubernetes-helm-installation-of-ocelot-social",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#kubernetes-helm-installation-of-ocelot-social"},[e("span",null,"Kubernetes Helm Installation Of Ocelot.Social")])],-1),m={href:"https://github.com/Ocelot-Social-Community/Ocelot-Social",target:"_blank",rel:"noopener noreferrer"},b={href:"https://helm.sh",target:"_blank",rel:"noopener noreferrer"},h={href:"https://kubernetes.io",target:"_blank",rel:"noopener noreferrer"},v=e("h2",{id:"kubernetes-cloud-hosting",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#kubernetes-cloud-hosting"},[e("span",null,"Kubernetes Cloud Hosting")])],-1),k=e("p",null,[n("There are various ways to set up your own or a managed Kubernetes cluster. We will extend the following lists over time."),e("br"),n(" Please contact us if you are interested in options not listed below.")],-1),g=e("p",null,"Managed Kubernetes:",-1),f=t('<h2 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration"><span>Configuration</span></a></h2><p>You can customize the network server with your configuration by duplicate the <code>values.template.yaml</code> to a new <code>values.yaml</code> file and change it to your need. All included variables will be available as environment variables in your deployed kubernetes pods.</p><p>Besides the <code>values.template.yaml</code> file we provide a <code>nginx.values.template.yaml</code> and <code>dns.values.template.yaml</code> for a similar procedure. The new <code>nginx.values.yaml</code> is the configuration for the ingress-nginx Helm chart, while the <code>dns.values.yaml</code> file is for automatically updating the dns values on DigitalOcean and therefore optional.</p><h2 id="installation" tabindex="-1"><a class="header-anchor" href="#installation"><span>Installation</span></a></h2><p>Due to the many limitations of Helm you still have to do several manual steps. Those occur before you run the actual <em>ocelot.social</em> Helm chart. Obviously it is expected of you to have <code>helm</code> and <code>kubectl</code> installed. For the cert-manager you may need <code>cmctl</code>, see below. For DigitalOcean you may also need <code>doctl</code>.</p><p>Install:</p>',6),y={href:"https://kubernetes.io/docs/tasks/tools/",target:"_blank",rel:"noopener noreferrer"},_={href:"https://docs.digitalocean.com/reference/doctl/how-to/install/",target:"_blank",rel:"noopener noreferrer"},w={href:"https://cert-manager.io/docs/usage/cmctl/#installation",target:"_blank",rel:"noopener noreferrer"},x={href:"https://helm.sh/docs/intro/install/",target:"_blank",rel:"noopener noreferrer"},D=e("h3",{id:"cert-manager-https",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#cert-manager-https"},[e("span",null,"Cert Manager (https)")])],-1),O={href:"https://cert-manager.io/docs/installation/",target:"_blank",rel:"noopener noreferrer"},I=t("<p><em><strong>ATTENTION:</strong></em> <em>Be with the Terminal in your repository in the folder of this README.</em></p><p>We have three ways to install the cert-manager, purely via <code>kubectl</code>, via <code>cmctl</code>, or with <code>helm</code>.</p><p>We recommend using <code>helm</code> because then we do not mix the installation methods. Please have a look here:</p>",3),$={href:"https://cert-manager.io/docs/installation/helm/#installing-with-helm",target:"_blank",rel:"noopener noreferrer"},T=e("p",null,[n("Our Helm installation is optimized for cert-manager version "),e("code",null,"v1.13.1"),n(" and "),e("code",null,"kubectl"),n(" version "),e("code",null,'"v1.28.2'),n(".")],-1),N=e("code",null,"kubectl",-1),S={href:"https://cert-manager.io/docs/installation/supported-releases/#supported-releases",target:"_blank",rel:"noopener noreferrer"},j=e("em",null,[e("strong",null,"ATTENTION:")],-1),A={href:"https://cert-manager.io/docs/installation/kubectl/#uninstalling",target:"_blank",rel:"noopener noreferrer"},U=t(`<h3 id="ingress-nginx" tabindex="-1"><a class="header-anchor" href="#ingress-nginx"><span>Ingress-Nginx</span></a></h3><h4 id="_1-add-helm-repository-for-ingress-nginx-and-update" tabindex="-1"><a class="header-anchor" href="#_1-add-helm-repository-for-ingress-nginx-and-update"><span>1. Add Helm repository for <code>ingress-nginx</code> and update</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ helm repo <span class="token function">add</span> ingress-nginx https://kubernetes.github.io/ingress-nginx
$ helm repo update
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-install-ingress-nginx" tabindex="-1"><a class="header-anchor" href="#_2-install-ingress-nginx"><span>2. Install ingress-nginx</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># in configuration/&lt;deployment-name&gt;</span>

<span class="token comment"># kubeconfig.yaml set globaly</span>
helm <span class="token function">install</span> ingress-nginx ingress-nginx/ingress-nginx <span class="token parameter variable">-f</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/src/kubernetes/nginx.values.yaml

<span class="token comment"># or kubeconfig.yaml in your repo, then adjust</span>
helm <span class="token function">install</span> <span class="token punctuation">\\</span>
  ingress-nginx ingress-nginx/ingress-nginx <span class="token parameter variable">-f</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/src/kubernetes/nginx.values.yaml <span class="token punctuation">\\</span>
  <span class="token parameter variable">--kubeconfig</span> ./kubeconfig.yaml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="digitalocean-firewall" tabindex="-1"><a class="header-anchor" href="#digitalocean-firewall"><span>DigitalOcean Firewall</span></a></h3>`,6),E={href:"https://stackoverflow.com/questions/54119399/expose-port-80-on-digital-oceans-managed-kubernetes-without-a-load-balancer/55968709",target:"_blank",rel:"noopener noreferrer"},C=t(`<h4 id="_1-authenticate-towards-do-with-your-local-doctl" tabindex="-1"><a class="header-anchor" href="#_1-authenticate-towards-do-with-your-local-doctl"><span>1. Authenticate towards DO with your local <code>doctl</code></span></a></h4><p>You will need a DO token for that.</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># without doctl context</span>
$ doctl auth init
<span class="token comment"># with doctl new context to be filled in</span>
$ doctl auth init <span class="token parameter variable">--context</span> <span class="token operator">&lt;</span>new-context-name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),H={href:"https://cloud.digitalocean.com/account/api/tokens",target:"_blank",rel:"noopener noreferrer"},R=t(`<h4 id="_2-generate-do-firewall" tabindex="-1"><a class="header-anchor" href="#_2-generate-do-firewall"><span>2. Generate DO firewall</span></a></h4><p>Get the <code>CLUSTER_UUID</code> value from the dashboard or from the ID column via <code>doctl kubernetes cluster list</code>:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># need to apply access token by \`doctl auth init\` before</span>
$ doctl kubernetes cluster list
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Fill in the <code>CLUSTER_UUID</code> and <code>your-domain</code>. The latter with hyphens <code>-</code> instead of dots <code>.</code>:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># without doctl context</span>
$ doctl compute firewall create <span class="token punctuation">\\</span>
--inbound-rules<span class="token operator">=</span><span class="token string">&quot;protocol:tcp,ports:80,address:0.0.0.0/0,address:::/0 protocol:tcp,ports:443,address:0.0.0.0/0,address:::/0&quot;</span> <span class="token punctuation">\\</span>
--tag-names<span class="token operator">=</span>k8s:<span class="token operator">&lt;</span>CLUSTER_UUID<span class="token operator">&gt;</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">--name</span><span class="token operator">=</span><span class="token operator">&lt;</span>your-domain<span class="token operator">&gt;</span>-http-https
<span class="token comment"># with doctl context to be filled in</span>
$ doctl compute firewall create <span class="token punctuation">\\</span>
--inbound-rules<span class="token operator">=</span><span class="token string">&quot;protocol:tcp,ports:80,address:0.0.0.0/0,address:::/0 protocol:tcp,ports:443,address:0.0.0.0/0,address:::/0&quot;</span> <span class="token punctuation">\\</span>
--tag-names<span class="token operator">=</span>k8s:<span class="token operator">&lt;</span>CLUSTER_UUID<span class="token operator">&gt;</span> <span class="token punctuation">\\</span>
<span class="token parameter variable">--name</span><span class="token operator">=</span><span class="token operator">&lt;</span>your-domain<span class="token operator">&gt;</span>-http-https <span class="token parameter variable">--context</span> <span class="token operator">&lt;</span>context-name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>To get informations about your success use this command. (Fill in the <code>ID</code> you got at creation.):</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># without doctl context</span>
$ doctl compute firewall get <span class="token operator">&lt;</span>ID<span class="token operator">&gt;</span>
<span class="token comment"># with doctl context to be filled in</span>
$ doctl compute firewall get <span class="token operator">&lt;</span>ID<span class="token operator">&gt;</span> <span class="token parameter variable">--context</span> <span class="token operator">&lt;</span>context-name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dns" tabindex="-1"><a class="header-anchor" href="#dns"><span>DNS</span></a></h3><p><em><strong>ATTENTION:</strong> This seems not to work at all so we leave it away at the moment</em></p>`,9),B=e("strong",null,"TODO:",-1),L=e("code",null,"dns.values.yaml",-1),V={href:"https://cloud.digitalocean.com/account/api/tokens",target:"_blank",rel:"noopener noreferrer"},q=t(`<h4 id="_1-add-helm-repository-for-binami-and-update" tabindex="-1"><a class="header-anchor" href="#_1-add-helm-repository-for-binami-and-update"><span>1. Add Helm repository for <code>binami</code> and update</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ helm repo <span class="token function">add</span> bitnami https://charts.bitnami.com/bitnami
$ helm repo update
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-install-dns" tabindex="-1"><a class="header-anchor" href="#_2-install-dns"><span>2. Install DNS</span></a></h4><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># !!! untested for now for new deployment structure !!!</span>

<span class="token comment"># kubeconfig.yaml set globaly</span>
$ helm <span class="token function">install</span> dns bitnami/external-dns <span class="token parameter variable">-f</span> dns.values.yaml
<span class="token comment"># or kubeconfig.yaml in your repo, then adjust</span>
$ helm <span class="token parameter variable">--kubeconfig</span><span class="token operator">=</span>/<span class="token punctuation">..</span>/kubeconfig.yaml <span class="token function">install</span> dns bitnami/external-dns <span class="token parameter variable">-f</span> dns.values.yaml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="ocelot-social" tabindex="-1"><a class="header-anchor" href="#ocelot-social"><span>Ocelot.Social</span></a></h3><p><em><strong>Attention:</strong> Before installing your own ocelot.social network, you need to create a DockerHub (account and) organization, put its name in the <code>package.json</code> file, and push your deployment and rebranding code to GitHub so that GitHub Actions can push your Docker images to DockerHub. This is because Kubernetes will pull these images to create PODs from them.</em></p><p>All commands for ocelot need to be executed in the kubernetes folder. Therefore <code>cd deployment/kubernetes/</code> is expected to be run before every command. Furthermore the given commands will install ocelot into the default namespace. This can be modified to by attaching <code>--namespace not.default</code>.</p><h4 id="install" tabindex="-1"><a class="header-anchor" href="#install"><span>Install</span></a></h4><p>Only run once for the first time of installation:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># in configuration/&lt;deployment-name&gt;</span>

<span class="token comment"># kubeconfig.yaml set globaly</span>
helm <span class="token function">install</span> ocelot <span class="token punctuation">\\</span>
  <span class="token parameter variable">--values</span> ./kubernetes/values.yaml <span class="token punctuation">\\</span>
  <span class="token parameter variable">--set</span> <span class="token assign-left variable">appVersion</span><span class="token operator">=</span><span class="token string">&quot;latest&quot;</span> <span class="token punctuation">\\</span>
  <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/src/kubernetes/ <span class="token punctuation">\\</span>
  <span class="token parameter variable">--timeout</span> 10m

<span class="token comment"># or kubeconfig.yaml in your repo, then adjust</span>
helm <span class="token function">install</span> ocelot <span class="token punctuation">\\</span>
  <span class="token parameter variable">--kubeconfig</span> ./kubeconfig.yaml <span class="token punctuation">\\</span>
  <span class="token parameter variable">--values</span> ./kubernetes/values.yaml <span class="token punctuation">\\</span>
  <span class="token parameter variable">--set</span> <span class="token assign-left variable">appVersion</span><span class="token operator">=</span><span class="token string">&quot;latest&quot;</span> <span class="token punctuation">\\</span>
  <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/src/kubernetes/ <span class="token punctuation">\\</span>
  <span class="token parameter variable">--timeout</span> 10m
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="upgrade-update" tabindex="-1"><a class="header-anchor" href="#upgrade-update"><span>Upgrade &amp; Update</span></a></h4><p>Run for all upgrades and updates:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># !!! untested for now for new deployment structure !!!</span>

<span class="token comment"># in configuration/&lt;deployment-name&gt;</span>

<span class="token comment"># kubeconfig.yaml set globaly</span>
helm upgrade ocelot <span class="token punctuation">\\</span>
  <span class="token parameter variable">--values</span> ./kubernetes/values.yaml <span class="token punctuation">\\</span>
  <span class="token parameter variable">--set</span> <span class="token assign-left variable">appVersion</span><span class="token operator">=</span><span class="token string">&quot;latest&quot;</span> <span class="token punctuation">\\</span>
  <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/src/kubernetes/ <span class="token punctuation">\\</span>
  <span class="token parameter variable">--timeout</span> 10m

<span class="token comment"># or kubeconfig.yaml in your repo, then adjust</span>
helm upgrade ocelot <span class="token punctuation">\\</span>
  <span class="token parameter variable">--kubeconfig</span> ./kubeconfig.yaml <span class="token punctuation">\\</span>
  <span class="token parameter variable">--values</span> ./kubernetes/values.yaml <span class="token punctuation">\\</span>
  <span class="token parameter variable">--set</span> <span class="token assign-left variable">appVersion</span><span class="token operator">=</span><span class="token string">&quot;latest&quot;</span> <span class="token punctuation">\\</span>
  <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/src/kubernetes/ <span class="token punctuation">\\</span>
  <span class="token parameter variable">--timeout</span> 10m
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="rollback" tabindex="-1"><a class="header-anchor" href="#rollback"><span>Rollback</span></a></h4><p>Run for a rollback, in case something went wrong:</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># !!! untested for now for new deployment structure !!!</span>

<span class="token comment"># in configuration/&lt;deployment-name&gt;</span>

<span class="token comment"># kubeconfig.yaml set globaly</span>
helm rollback ocelot <span class="token parameter variable">--timeout</span> 10m

<span class="token comment"># or kubeconfig.yaml in your repo, then adjust</span>
helm rollback ocelot <span class="token punctuation">\\</span>
  <span class="token parameter variable">--kubeconfig</span> ./kubeconfig.yaml <span class="token punctuation">\\</span>
  <span class="token parameter variable">--timeout</span> 10m
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="uninstall" tabindex="-1"><a class="header-anchor" href="#uninstall"><span>Uninstall</span></a></h4><p>Be aware that if you uninstall ocelot the formerly bound volumes become unbound. Those volumes contain all data from uploads and database. You have to manually free their reference in order to bind them again when reinstalling. Once unbound from their former container references they should automatically be rebound (considering the sizes did not change)</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># !!! untested for now for new deployment structure !!!</span>

<span class="token comment"># in configuration/&lt;deployment-name&gt;</span>

<span class="token comment"># kubeconfig.yaml set globaly</span>
helm uninstall ocelot <span class="token parameter variable">--timeout</span> 10m

<span class="token comment"># or kubeconfig.yaml in your repo, then adjust</span>
helm uninstall ocelot <span class="token punctuation">\\</span>
  <span class="token parameter variable">--kubeconfig</span> ./kubeconfig.yaml <span class="token punctuation">\\</span>
  <span class="token parameter variable">--timeout</span> 10m
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="backups" tabindex="-1"><a class="header-anchor" href="#backups"><span>Backups</span></a></h2>`,20),K=t(`<h2 id="kubernetes-commands-without-helm-to-deploy-new-docker-images-to-a-kubernetes-cluster" tabindex="-1"><a class="header-anchor" href="#kubernetes-commands-without-helm-to-deploy-new-docker-images-to-a-kubernetes-cluster"><span>Kubernetes Commands (Without Helm) To Deploy New Docker Images To A Kubernetes Cluster</span></a></h2><h3 id="deploy-a-version" tabindex="-1"><a class="header-anchor" href="#deploy-a-version"><span>Deploy A Version</span></a></h3><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># !!! be aware of the correct kube context !!!</span>
$ kubectl config get-contexts

<span class="token comment"># deploy version &#39;$BUILD_VERSION&#39;</span>
<span class="token comment"># !!! &#39;latest&#39; is not recommended on production !!!</span>

<span class="token comment"># for easyness set env</span>
$ <span class="token builtin class-name">export</span> <span class="token assign-left variable">BUILD_VERSION</span><span class="token operator">=</span><span class="token number">1.0</span>.8-48-ocelot.social1.0.8-184 <span class="token comment"># example</span>
<span class="token comment"># check this with</span>
$ <span class="token builtin class-name">echo</span> <span class="token variable">$BUILD_VERSION</span>
<span class="token number">1.0</span>.8-48-ocelot.social1.0.8-184

<span class="token comment"># deploy actual version &#39;$BUILD_VERSION&#39; to Kubernetes cluster</span>
$ kubectl <span class="token parameter variable">-n</span> default <span class="token builtin class-name">set</span> image deployment/ocelot-webapp container-ocelot-webapp<span class="token operator">=</span>ocelotsocialnetwork/webapp:<span class="token variable">$BUILD_VERSION</span>
$ kubectl <span class="token parameter variable">-n</span> default rollout restart deployment/ocelot-webapp
$ kubectl <span class="token parameter variable">-n</span> default <span class="token builtin class-name">set</span> image deployment/ocelot-backend container-ocelot-backend<span class="token operator">=</span>ocelotsocialnetwork/backend:<span class="token variable">$BUILD_VERSION</span>
$ kubectl <span class="token parameter variable">-n</span> default rollout restart deployment/ocelot-backend
$ kubectl <span class="token parameter variable">-n</span> default <span class="token builtin class-name">set</span> image deployment/ocelot-maintenance container-ocelot-maintenance<span class="token operator">=</span>ocelotsocialnetwork/maintenance:<span class="token variable">$BUILD_VERSION</span>
$ kubectl <span class="token parameter variable">-n</span> default rollout restart deployment/ocelot-maintenance
$ kubectl <span class="token parameter variable">-n</span> default <span class="token builtin class-name">set</span> image deployment/ocelot-neo4j container-ocelot-neo4j<span class="token operator">=</span>ocelotsocialnetwork/neo4j-community:<span class="token variable">$BUILD_VERSION</span>
$ kubectl <span class="token parameter variable">-n</span> default rollout restart deployment/ocelot-neo4j
<span class="token comment"># verify deployment and wait for the pods of each deployment to get ready for cleaning and seeding of the database</span>
$ kubectl <span class="token parameter variable">-n</span> default rollout status deployment/ocelot-webapp <span class="token parameter variable">--timeout</span><span class="token operator">=</span>240s
$ kubectl <span class="token parameter variable">-n</span> default rollout status deployment/ocelot-maintenance <span class="token parameter variable">--timeout</span><span class="token operator">=</span>240s
$ kubectl <span class="token parameter variable">-n</span> default rollout status deployment/ocelot-backend <span class="token parameter variable">--timeout</span><span class="token operator">=</span>240s
$ kubectl <span class="token parameter variable">-n</span> default rollout status deployment/ocelot-neo4j <span class="token parameter variable">--timeout</span><span class="token operator">=</span>240s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="staging-–-clean-and-seed-neo4j-database" tabindex="-1"><a class="header-anchor" href="#staging-–-clean-and-seed-neo4j-database"><span>Staging – Clean And Seed Neo4j Database</span></a></h3><p><em><strong>ATTENTION:</strong></em> Cleaning and seeding of our Neo4j database is only possible in production if env <code>PRODUCTION_DB_CLEAN_ALLOW=true</code> is set in our deployment.</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># !!! be aware of the correct kube context !!!</span>
$ kubectl config get-contexts

<span class="token comment"># for staging: reset and seed Neo4j database via backend</span>
$ kubectl <span class="token parameter variable">-n</span> default <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> <span class="token variable"><span class="token variable">$(</span>kubectl <span class="token parameter variable">-n</span> default get pods <span class="token operator">|</span> <span class="token function">grep</span> ocelot-backend <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{ print $1 }&#39;</span><span class="token variable">)</span></span> -- /bin/sh <span class="token parameter variable">-c</span> <span class="token string">&quot;node --experimental-repl-await build/src/db/clean.js &amp;&amp; node --experimental-repl-await build/src/db/seed.js&quot;</span>

<span class="token comment"># or alternatively</span>

<span class="token comment"># for production: set Neo4j database indexes, constrains, and initial admin account plus run migrate up via backend</span>
$ kubectl <span class="token parameter variable">-n</span> default <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> <span class="token variable"><span class="token variable">$(</span>kubectl <span class="token parameter variable">-n</span> default get pods <span class="token operator">|</span> <span class="token function">grep</span> ocelot-backend <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{ print $1 }&#39;</span><span class="token variable">)</span></span> -- /bin/sh <span class="token parameter variable">-c</span> <span class="token string">&quot;yarn prod:migrate init &amp;&amp; yarn prod:migrate up&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6);function P(W,F){const s=i("ExternalLinkIcon"),l=i("RouteLink");return c(),d("div",null,[u,e("p",null,[n("Deploying "),e("a",m,[n("ocelot.social"),a(s)]),n(" with "),e("a",b,[n("Helm"),a(s)]),n(" for "),e("a",h,[n("Kubernetes"),a(s)]),n(" is very straight forward. All you have to do is to change certain parameters, like domain names and API keys, then you just install our provided Helm chart to your cluster.")]),v,k,g,e("ul",null,[e("li",null,[a(l,{to:"/deployment/src/kubernetes/DigitalOcean.html"},{default:o(()=>[n("DigitalOcean")]),_:1})])]),f,e("ul",null,[e("li",null,[e("a",y,[n("kubectl v1.24.1"),a(s)])]),e("li",null,[e("a",_,[n("doctl v1.78.0"),a(s)])]),e("li",null,[e("a",w,[n("cmctl v1.8.2"),a(s)])]),e("li",null,[e("a",x,[n("helm v3.9.0"),a(s)])])]),D,e("p",null,[n("Please refer to "),e("a",O,[n("cert-manager.io docs"),a(s)]),n(" for more details.")]),I,e("ul",null,[e("li",null,[e("a",$,[n("Installing with Helm"),a(s)])])]),T,e("p",null,[n("Please search here for cert-manager versions that are compatible with your "),N,n(" version on the cluster and on the client: "),e("a",S,[n("cert-manager Supported Releases"),a(s)]),n(".")]),e("p",null,[j,n(),e("em",null,[n("When uninstalling cert-manager, be sure to use the same method as for installation! Otherwise, we could end up in a broken state, see "),e("a",A,[n("Uninstall"),a(s)]),n(".")])]),U,e("p",null,[n("This is only necessary if you run DigitalOcean without load balancer ("),e("a",E,[n("see here for more info"),a(s)]),n(") .")]),C,e("p",null,[n("You will need an API token, which you can generate in the control panel at "),e("a",H,[n("https://cloud.digitalocean.com/account/api/tokens"),a(s)]),n(" .")]),R,e("p",null,[e("em",null,[B,n(" I thought this is necessary if we use the DigitalOcean DNS management service? See "),a(l,{to:"/deployment/src/kubernetes/DigitalOcean.html#manage-dns-with-digitalocean"},{default:o(()=>[n("Manage DNS With DigitalOcean")]),_:1})])]),e("p",null,[n("This chart is only necessary (recommended is more precise) if you run DigitalOcean without load balancer. You need to generate an access token with read + write for the "),L,n(" at "),e("a",V,[n("https://cloud.digitalocean.com/account/api/tokens"),a(s)]),n(" and fill it in.")]),q,e("p",null,[n("You can and should do "),a(l,{to:"/deployment/src/kubernetes/Backup.html"},{default:o(()=>[n("backups")]),_:1}),n(" with Kubernetes for sure.")]),K])}const z=r(p,[["render",P],["__file","index.html.vue"]]),G=JSON.parse('{"path":"/deployment/src/kubernetes/","title":"Kubernetes Helm Installation Of Ocelot.Social","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Kubernetes Cloud Hosting","slug":"kubernetes-cloud-hosting","link":"#kubernetes-cloud-hosting","children":[]},{"level":2,"title":"Configuration","slug":"configuration","link":"#configuration","children":[]},{"level":2,"title":"Installation","slug":"installation","link":"#installation","children":[{"level":3,"title":"Cert Manager (https)","slug":"cert-manager-https","link":"#cert-manager-https","children":[]},{"level":3,"title":"Ingress-Nginx","slug":"ingress-nginx","link":"#ingress-nginx","children":[]},{"level":3,"title":"DigitalOcean Firewall","slug":"digitalocean-firewall","link":"#digitalocean-firewall","children":[]},{"level":3,"title":"DNS","slug":"dns","link":"#dns","children":[]},{"level":3,"title":"Ocelot.Social","slug":"ocelot-social","link":"#ocelot-social","children":[]}]},{"level":2,"title":"Backups","slug":"backups","link":"#backups","children":[]},{"level":2,"title":"Kubernetes Commands (Without Helm) To Deploy New Docker Images To A Kubernetes Cluster","slug":"kubernetes-commands-without-helm-to-deploy-new-docker-images-to-a-kubernetes-cluster","link":"#kubernetes-commands-without-helm-to-deploy-new-docker-images-to-a-kubernetes-cluster","children":[{"level":3,"title":"Deploy A Version","slug":"deploy-a-version","link":"#deploy-a-version","children":[]},{"level":3,"title":"Staging – Clean And Seed Neo4j Database","slug":"staging-–-clean-and-seed-neo4j-database","link":"#staging-–-clean-and-seed-neo4j-database","children":[]}]}],"git":{"createdTime":1729782505000,"updatedTime":1729782505000,"contributors":[{"name":"Wolfgang Huß","email":"wolle.huss@pjannto.com","commits":1}]},"readingTime":{"minutes":5.82,"words":1745},"filePathRelative":"deployment/src/kubernetes/README.md","localizedDate":"October 24, 2024","excerpt":"\\n<p>Deploying <a href=\\"https://github.com/Ocelot-Social-Community/Ocelot-Social\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">ocelot.social</a> with <a href=\\"https://helm.sh\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Helm</a> for <a href=\\"https://kubernetes.io\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Kubernetes</a> is very straight forward. All you have to do is to change certain parameters, like domain names and API keys, then you just install our provided Helm chart to your cluster.</p>"}');export{z as comp,G as data};
