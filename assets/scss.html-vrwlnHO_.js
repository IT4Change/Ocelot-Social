import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as i,o as r,c as l,a as e,b as s,d as t,e as a}from"./app-DAOD0aSW.js";const d={},c=a('<h1 id="scss-code-guidelines" tabindex="-1"><a class="header-anchor" href="#scss-code-guidelines"><span>SCSS - Code Guidelines</span></a></h1><h2 id="we-use-classes-over-tags-and-ids" tabindex="-1"><a class="header-anchor" href="#we-use-classes-over-tags-and-ids"><span>We use classes over tags and ids</span></a></h2><p>Never apply styles to <code>tags</code> or <code>ids</code> – use <code>classes</code> instead!</p><p>Why?</p><ul><li>HTML tags are responsible for the document <em>structure</em>, not the looks</li><li>targeting HTML tags comes with performance issues</li><li>ids are responsible for identifying a unique element, not for styling it</li><li>ids have higher specificity than classes and therefore don&#39;t play well together</li><li>classes can be combined and reused while ids are unique</li></ul>',5),h={href:"https://frontstuff.io/you-need-to-stop-targeting-tags-in-css",target:"_blank",rel:"noopener noreferrer"},p={href:"https://dev.to/clairecodes/reasons-not-to-use-ids-in-css-4ni4",target:"_blank",rel:"noopener noreferrer"},u=a('<h2 id="we-use-design-tokens-instead-of-magic-numbers" tabindex="-1"><a class="header-anchor" href="#we-use-design-tokens-instead-of-magic-numbers"><span>We use design tokens instead of magic numbers</span></a></h2><p>In order to achieve a consistent look and feel we use a set of pre-defined <code>design tokens</code> to style our components, for example <code>colors</code>, <code>sizes</code> and <code>box-shadows</code>. These tokens are stored as <code>SCSS variables</code> and reused throughout the app.</p><p>So, instead of typing <em>pixel values</em> or <em>hex codes</em> make sure you use design tokens such as <code>height-header</code> or <code>color-input-border</code>.</p><h2 id="we-name-our-classes-after-components" tabindex="-1"><a class="header-anchor" href="#we-name-our-classes-after-components"><span>We name our classes after components</span></a></h2>',4),m={href:"https://vuejs.org/v2/guide/single-file-components.html",target:"_blank",rel:"noopener noreferrer"},g=e("em",null,"unique",-1),f=e("p",null,"Why?",-1),v=e("li",null,"it clearly ties the styles to the one component",-1),w=e("li",null,"having unique class names means styles will not be accidentally overwritten in other files",-1),b=e("code",null,"scoped CSS",-1),k={href:"https://vue-loader.vuejs.org/guide/scoped-css.html#also-keep-in-mind",target:"_blank",rel:"noopener noreferrer"},y=a(`<h2 id="we-use-variants-instead-of-overriding-styles" tabindex="-1"><a class="header-anchor" href="#we-use-variants-instead-of-overriding-styles"><span>We use variants instead of overriding styles</span></a></h2><p>Components will sometimes need to look different depending on the context in which they are used – a button might for example be <code>green</code> when it represents a call to action and <code>red</code> when it triggers a destructive action. Rather than making the <code>rounded-button</code> component <code>green</code> by default and then overriding the <code>color</code> for, say, the <code>delete-account</code> action – use variants! Pass the <code>rounded-button</code> a prop, such as <code>color: danger</code>, and then apply the respective <code>variant class</code>.</p><p>Name variant classes with a dash prefix, such as <code>-danger</code>, then target them like this:</p><div class="language-scss line-numbers-mode" data-ext="scss" data-title="scss"><pre class="language-scss"><code><span class="token selector">.rounded-button </span><span class="token punctuation">{</span>
  <span class="token comment">/* other css styles */</span>

  <span class="token selector"><span class="token parent important">&amp;</span>.-danger </span><span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token variable">$color-danger</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="we-style-within-the-component-we-position-when-we-use-it" tabindex="-1"><a class="header-anchor" href="#we-style-within-the-component-we-position-when-we-use-it"><span>We <em>style</em> within the component, we <em>position</em> when we use it</span></a></h2><p>In order to make components truly reusable it is important to limit their styles to, well, their actual <em>styling</em>. What color are they, how big is the text, what happens on <code>hover</code>, do they have a rounded border – all that is part of it.</p>`,6),_=e("em",null,"parent",-1),x={href:"https://rscss.io/layouts.html",target:"_blank",rel:"noopener noreferrer"},S=a(`<p>To do that, use the <code>child selector</code>, like this:</p><div class="language-scss line-numbers-mode" data-ext="scss" data-title="scss"><pre class="language-scss"><code><span class="token selector">.login-form </span><span class="token punctuation">{</span>
  <span class="token comment">/* other css styles */</span>

  <span class="token selector">&gt; .rounded-button </span><span class="token punctuation">{</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token variable">$margin-small</span><span class="token punctuation">;</span>
    <span class="token property">justify-self</span><span class="token punctuation">:</span> flex-end<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>A special case are dimensions like <code>width</code> and <code>height</code>. If it is important that a component always has the same dimensions (the height of a button should be consistent, for example) define it <em>within the component</em> itself, if a component should have flexible dimensions (a card, for example, could stretch over the whole screen in one place and be limited to a certain width in another) define the dimensions <em>in the parent</em>.</p><h2 id="recommended-reads" tabindex="-1"><a class="header-anchor" href="#recommended-reads"><span>Recommended reads</span></a></h2><p>For a deeper dive into the WHY and HOW have a look at the following resources which the above guidelines are based on:</p>`,5),W={href:"https://rscss.io/index.html",target:"_blank",rel:"noopener noreferrer"},T={href:"https://csswizardry.net/talks/2014/11/itcss-dafed.pdf",target:"_blank",rel:"noopener noreferrer"};function C(N,H){const n=i("ExternalLinkIcon");return r(),l("div",null,[c,e("p",null,[s("For more background see the following articles on "),e("a",h,[s("why not to style tags"),t(n)]),s(" and "),e("a",p,[s("why not to style ids"),t(n)]),s(".")]),u,e("p",null,[s("Our SCSS styles live within the corresponding component (see the "),e("a",m,[s("Vue.js docs for single-file components"),t(n)]),s(" for reference) and should therefore carry the same "),g,s(" name.")]),f,e("ul",null,[v,w,e("li",null,[s("we can avoid using "),b,s(" which "),e("a",k,[s("comes with performance caveats"),t(n)])])]),y,e("p",null,[s("Margins, alignment and positioning on the other hand need to be defined in the "),_,s(" because the same component might sometimes be aligned to the left, sometimes to the right and sometimes float above other content. For more details see the "),e("a",x,[s("rscss guidelines"),t(n)]),s(".")]),S,e("ul",null,[e("li",null,[e("a",W,[s("rscss – reasonable system for css stylesheet structure"),t(n)])]),e("li",null,[e("a",T,[s("itcss – inverted triangle architecture for css"),t(n)])])])])}const j=o(d,[["render",C],["__file","scss.html.vue"]]),I=JSON.parse(`{"path":"/webapp/scss.html","title":"SCSS - Code Guidelines","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"We use classes over tags and ids","slug":"we-use-classes-over-tags-and-ids","link":"#we-use-classes-over-tags-and-ids","children":[]},{"level":2,"title":"We use design tokens instead of magic numbers","slug":"we-use-design-tokens-instead-of-magic-numbers","link":"#we-use-design-tokens-instead-of-magic-numbers","children":[]},{"level":2,"title":"We name our classes after components","slug":"we-name-our-classes-after-components","link":"#we-name-our-classes-after-components","children":[]},{"level":2,"title":"We use variants instead of overriding styles","slug":"we-use-variants-instead-of-overriding-styles","link":"#we-use-variants-instead-of-overriding-styles","children":[]},{"level":2,"title":"We style within the component, we position when we use it","slug":"we-style-within-the-component-we-position-when-we-use-it","link":"#we-style-within-the-component-we-position-when-we-use-it","children":[]},{"level":2,"title":"Recommended reads","slug":"recommended-reads","link":"#recommended-reads","children":[]}],"git":{"createdTime":1729782505000,"updatedTime":1729782505000,"contributors":[{"name":"Wolfgang Huß","email":"wolle.huss@pjannto.com","commits":1}]},"readingTime":{"minutes":2.07,"words":622},"filePathRelative":"webapp/scss.md","localizedDate":"October 24, 2024","excerpt":"\\n<h2>We use classes over tags and ids</h2>\\n<p>Never apply styles to <code>tags</code> or <code>ids</code> – use <code>classes</code> instead!</p>\\n<p>Why?</p>\\n<ul>\\n<li>HTML tags are responsible for the document <em>structure</em>, not the looks</li>\\n<li>targeting HTML tags comes with performance issues</li>\\n<li>ids are responsible for identifying a unique element, not for styling it</li>\\n<li>ids have higher specificity than classes and therefore don't play well together</li>\\n<li>classes can be combined and reused while ids are unique</li>\\n</ul>"}`);export{j as comp,I as data};
